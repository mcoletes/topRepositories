//
//  TopRatedRepositoriesInteractor.swift
//  TopRatedRepositories
//
//  Created by Mauro Sasso Coletes on 11/04/19.
//  Copyright (c) 2019 MSC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TopRatedRepositoriesBusinessLogic {
    func fetchRepositories()
    func refreshContent()
    func numbeOfRows() -> Int
    func viewModelForIndex(index: Int) -> TopRatedRepositoriesModels.ViewModel?
    func loadNextPageIfNeeded(for index: Int)
}

protocol TopRatedRepositoriesDataStore {
    var currentPage: Int { get set }
}

class TopRatedRepositoriesInteractor: TopRatedRepositoriesBusinessLogic, TopRatedRepositoriesDataStore {
    
    var presenter: TopRatedRepositoriesPresentationLogic?
    var worker: TopRatedRepositoriesWorker?
    var items: [Repository] = []
    var currentPage: Int = 1
    var pageSize: Int = 30
    
    init(worker:TopRatedRepositoriesWorker = TopRatedRepositoriesWorker()) {
        self.worker = worker
    }

    // MARK: Do something

    func fetchRepositories() {
        let request = TopRatedRepositoriesModels.Request(page: currentPage)
        worker?.fetchTopRatedRepositories(request: request, onSuccess: { (repositories) in
            self.presenter?.presentEndRefreshControl()
            if let repoItems = repositories.items {
                self.items.append(contentsOf: repoItems)
            }
            self.presenter?.reloadTable()
        }, onError: { (error) in
            self.presenter?.presentEndRefreshControl()
            switch error {
            case .requestFailed:
                self.presenter?.displayError(type: TopRatedRepositoriesModels.errors.noInternet, tryAgainAction: nil)
            case .jsonParsingFailure, .responseUnsuccessful(statusCode: _):
                self.presenter?.displayError(type: TopRatedRepositoriesModels.errors.tryAgain, tryAgainAction: self.fetchRepositories)
            }
        })
    }
    
    func refreshContent() {
        currentPage = 1
        items = []
        fetchRepositories()
    }
    func numbeOfRows() -> Int {
        return self.items.count
    }
    
    func viewModelForIndex(index: Int) -> TopRatedRepositoriesModels.ViewModel? {
        guard index >= 0 && index < numbeOfRows() else { return nil }
        return presenter?.presentViewModelFromModel(repository: items[index])
    }
    
     func loadNextPageIfNeeded(for index: Int) {
        
        let targetCount = currentPage < 0 ? 1 : currentPage * pageSize - 10
        guard index == targetCount else {
            return
        }
        currentPage += 1
        fetchRepositories()
    }
}
