//
//  TopRatedRepositoriesViewController.swift
//  TopRatedRepositories
//
//  Created by Mauro Sasso Coletes on 11/04/19.
//  Copyright (c) 2019 MSC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TopRatedRepositoriesDisplayLogic: class, ViewControllerBaseProtocol {
    func endRefreshControl()
    func reloaTable()
}

final class TopRatedRepositoriesViewController: UITableViewController {
    var interactor: TopRatedRepositoriesBusinessLogic?
    
    // MARK: Object lifecycle

    init() {
        super.init(nibName: nil, bundle: nil)
        self.tableView.separatorStyle = .none
    }

    required init?(coder aDecoder: NSCoder) {
         fatalError("init(coder:) has not been implemented")
    }
    
    override func loadView() {
        super.loadView()
        self.title = R.string.topRatedRepositories.topRepositoriesTitle()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = TopRatedRepositoriesInteractor()
        let presenter = TopRatedRepositoriesPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupRefreshControl()
        addSpinnerToFooteTableView()
        setup()
        interactor?.fetchRepositories()
        tableView.estimatedRowHeight = 60
        tableView.rowHeight = UITableView.automaticDimension
        tableView.prefetchDataSource = self
        
    }
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.numbeOfRows() ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: TopRatedRepositoryTableViewCell = tableView.dequeueReusableCell(for: indexPath)
        if let item = interactor?.viewModelForIndex(index: indexPath.row) {
            cell.configure(name: item.name, stars: "\(item.stars)", ownerName: item.ownerName, ownerImageURL: item.ownerPhotoURL)
            return cell
        }
       return UITableViewCell()
        
    }
    
    func addSpinnerToFooteTableView(){
        let spinner = UIActivityIndicatorView(style: .gray)
        spinner.startAnimating()
        spinner.frame = CGRect(x: CGFloat(0), y: CGFloat(0), width: tableView.bounds.width, height: CGFloat(44))
        
        tableView.tableFooterView = spinner
        tableView.tableFooterView?.isHidden = false
    }

    
    func setupRefreshControl() {
        self.refreshControl = {
            let refreshControl = UIRefreshControl()
            refreshControl.addTarget(self, action:
                #selector(TopRatedRepositoriesViewController.handleRefresh(_:)),
                                     for: UIControl.Event.valueChanged)
            refreshControl.tintColor = UIColor.red
            
            return refreshControl
        }()
    }
    
    @objc func handleRefresh(_ refreshControl: UIRefreshControl) {
        self.interactor?.refreshContent()
    }
    
}

extension TopRatedRepositoriesViewController: TopRatedRepositoriesDisplayLogic {
    
    func endRefreshControl(){
        DispatchQueue.main.async {
            self.refreshControl?.endRefreshing()
        }
    }
    func reloaTable() {
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
}

extension TopRatedRepositoriesViewController: UITableViewDataSourcePrefetching {
    func tableView(_ tableView: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {
        for indexPath in indexPaths {
            interactor?.loadNextPageIfNeeded(for: indexPath.row)
        }
    }
}
